name: Build Docker Image and Deploy
on:
  push:
    branches:
      - main
    tags:
      - '*'
env:
  IMAGE_NAME: andruwkakz/app_for_diplom
  NAMESPACE: diplom
  DEPLOYMENT_NAME: diplom

jobs:
  build_app:
    runs-on: self-hosted
    steps:
      # Шаг 1: Клонируем проект
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Determine Docker tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "TAG=latest" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi

      # Шаг 2: Авторизуемся в Docker Registry
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Шаг 3: Собираем Docker образ
      - name: Build Docker Image
        run: docker build -t  ${{ env.IMAGE_NAME }}:${{ env.TAG }} .
     
      # Шаг 5: Пушим Docker образ в Docker Hub
      - name: Push Docker Image
        run: docker push  ${{ env.IMAGE_NAME }}:${{ env.TAG }}

  deploy_app:
    needs: build_app
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: List files in the working directory
        run: |
          ls -la

      - name: Extract version from tag or commit message
        run: |
          echo "GITHUB_REF: ${GITHUB_REF}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=$(git log -1 --pretty=format:%B | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' || echo "")
          fi
          if [[ -z "$VERSION" ]]; then
            echo "No version found in the commit message or tag"
            exit 1
          fi
          VERSION=${VERSION//[[:space:]]/}  # Remove any spaces
          echo "Using version: $VERSION"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV

      - name: Replace image tag in app.yaml
        run: |
          if [ ! -f /home/ubuntu/manifest/app.yaml ]; then
            echo "app.yaml not found in the current directory"
            exit 1
          fi
          sed -i "s|image: {{ env.IMAGE_NAME }}:.*|image: ${{ env.IMAGE_NAME }}:${{ env.VERSION }}|" /home/ubuntu/manifest/app.yaml 

      - name: Apply Kubernetes manifests
        run: |
          kubectl apply -f /home/ubuntu/manifest/app.yaml -n diplom